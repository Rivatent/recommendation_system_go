// // Code generated by MockGen. DO NOT EDIT.
// // Source: service.go
//
// // Package mocks is a generated GoMock package.
package mocks

//
//import (
//	reflect "reflect"
//	model "user-service/internal/model"
//
//	gomock "github.com/golang/mock/gomock"
//)
//
//// MockIRepo is a mock of IRepo interface.
//type MockIRepo struct {
//	ctrl     *gomock.Controller
//	recorder *MockIRepoMockRecorder
//}
//
//// MockIRepoMockRecorder is the mock recorder for MockIRepo.
//type MockIRepoMockRecorder struct {
//	mock *MockIRepo
//}
//
//// NewMockIRepo creates a new mock instance.
//func NewMockIRepo(ctrl *gomock.Controller) *MockIRepo {
//	mock := &MockIRepo{ctrl: ctrl}
//	mock.recorder = &MockIRepoMockRecorder{mock}
//	return mock
//}
//
//// EXPECT returns an object that allows the caller to indicate expected use.
//func (m *MockIRepo) EXPECT() *MockIRepoMockRecorder {
//	return m.recorder
//}
//
//// CreateUserRepo mocks base method.
//func (m *MockIRepo) CreateUserRepo(user model.User) (string, error) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "CreateUserRepo", user)
//	ret0, _ := ret[0].(string)
//	ret1, _ := ret[1].(error)
//	return ret0, ret1
//}
//
//// CreateUserRepo indicates an expected call of CreateUserRepo.
//func (mr *MockIRepoMockRecorder) CreateUserRepo(user interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRepo", reflect.TypeOf((*MockIRepo)(nil).CreateUserRepo), user)
//}
//
//// GetUserByIDRepo mocks base method.
//func (m *MockIRepo) GetUserByIDRepo(id string) (model.User, error) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "GetUserByIDRepo", id)
//	ret0, _ := ret[0].(model.User)
//	ret1, _ := ret[1].(error)
//	return ret0, ret1
//}
//
//// GetUserByIDRepo indicates an expected call of GetUserByIDRepo.
//func (mr *MockIRepoMockRecorder) GetUserByIDRepo(id interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByIDRepo", reflect.TypeOf((*MockIRepo)(nil).GetUserByIDRepo), id)
//}
//
//// GetUsersRepo mocks base method.
//func (m *MockIRepo) GetUsersRepo() ([]model.User, error) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "GetUsersRepo")
//	ret0, _ := ret[0].([]model.User)
//	ret1, _ := ret[1].(error)
//	return ret0, ret1
//}
//
//// GetUsersRepo indicates an expected call of GetUsersRepo.
//func (mr *MockIRepoMockRecorder) GetUsersRepo() *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersRepo", reflect.TypeOf((*MockIRepo)(nil).GetUsersRepo))
//}
//
//// UpdateUserRepo mocks base method.
//func (m *MockIRepo) UpdateUserRepo(user model.User) (model.User, error) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "UpdateUserRepo", user)
//	ret0, _ := ret[0].(model.User)
//	ret1, _ := ret[1].(error)
//	return ret0, ret1
//}
//
//// UpdateUserRepo indicates an expected call of UpdateUserRepo.
//func (mr *MockIRepoMockRecorder) UpdateUserRepo(user interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRepo", reflect.TypeOf((*MockIRepo)(nil).UpdateUserRepo), user)
//}
