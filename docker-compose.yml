version: '3.8'

services:
  postgres:
    image: postgres:17.0
    environment:
      POSTGRES_DB: "mydb"
      POSTGRES_USER: "rivatent"
      POSTGRES_PASSWORD: "3223"
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U rivatent -d mydb" ]
      interval: 10s
      timeout: 5s
      retries: 5


  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    healthcheck:
      test: ["CMD", "echo", "ruok"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    hostname: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-topics --bootstrap-server kafka:29092 --list | grep -q 'user_new'"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "
      /etc/confluent/docker/run &
      echo 'Waiting for Kafka to become available...' &&
      while ! kafka-topics --bootstrap-server kafka:29092 --list > /dev/null 2>&1; do
        sleep 1
      done &&
      echo 'Kafka is ready. Creating topics...' &&
      kafka-topics --create --bootstrap-server kafka:29092 --replication-factor 1 --partitions 5 --topic product_update &&
      kafka-topics --create --bootstrap-server kafka:29092 --replication-factor 1 --partitions 5 --topic product_new &&
      kafka-topics --create --bootstrap-server kafka:29092 --replication-factor 1 --partitions 5 --topic user_update &&
      kafka-topics --create --bootstrap-server kafka:29092 --replication-factor 1 --partitions 5 --topic user_new &&
      wait"

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - 8090:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092 #,kafka2:29093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    links:
      - kafka
      - zookeeper

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    env_file:
      - ./user-service/.env
    depends_on:
      postgres:
         condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      redis:
        condition: service_healthy

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    env_file:
      - ./product-service/.env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      redis:
        condition: service_healthy

  recommendations-service:
    build:
      context: ./recommendation-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    env_file:
      - ./recommendation-service/.env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      redis:
        condition: service_healthy

  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    env_file:
      - ./analytics-service/.env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      redis:
        condition: service_healthy

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/prometheus
    command:
      - '--config.file=/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus/data'
    depends_on:
      - user-service
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3