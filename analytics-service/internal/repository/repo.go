package repository

import (
	"database/sql"
	_ "github.com/lib/pq"
	"os"
)

// Repo - структура, представляющая репозиторий, который содержит соединение с базой данных.
type Repo struct {
	db *sql.DB
}

// New - функция для создания нового экземпляра Repo.
// Она считывает строку подключения из переменной окружения "DATABASE_URL",
// открывает соединение с базой данных PostgreSQL и проверяет его доступность.
// В случае успеха возвращает указатель на новый Repo, который будет использоваться для работы с БД.
//
// Возвращаемое значение:
// - *Repo: указатель на структуру Repo, представляющую подключение к базе данных.
//
// Примечание: В случае ошибки (например, если строка подключения неверна или сетевая ошибка)
// функция вызывает паническое состояние, прекращая выполнение программы.
func New() *Repo {
	dsn := os.Getenv("DATABASE_URL")
	db, err := sql.Open("postgres", dsn)
	if err != nil {
		panic(err)
	}
	if err = db.Ping(); err != nil {
		panic(err)
	}

	return &Repo{db: db}
}

// Close - метод для закрытия соединения с базой данных.
// Он освобождает все ресурсы, связанные с соединением с БД.
//
// Возвращаемое значение:
// - error: возвращает ошибку, если при закрытии соединения произошла ошибка, или nil в случае успеха.
func (r *Repo) Close() error {
	err := r.db.Close()
	if err != nil {
		return err
	}
	return nil
}
